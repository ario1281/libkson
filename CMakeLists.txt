cmake_minimum_required(VERSION 3.11)
project(kson CXX)

option(kson_build_ksh2kson "build ksh2kson tool" ON)

file(GLOB_RECURSE sources src/*.cpp)
add_library(kson STATIC ${sources})
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    if("${CMAKE_BUILD_TYPE}" MATCHES "Debug")
        target_compile_options(kson PRIVATE /MTd /W4)
        message("Build type: Debug")
    else()
        target_compile_options(kson PRIVATE /MT /W4 /DNDEBUG)
        message("Build type: Release")
    endif()
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    target_compile_options(kson PRIVATE -O2 -Wall -fPIC -fconcepts)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_compile_options(kson PRIVATE -O2 -Wall -fPIC)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
    target_compile_options(kson PRIVATE -O2 -Wall -fPIC)
else()
    target_compile_options(kson PRIVATE -O2 -Wall -fPIC)
    message("Warning: Unsupported compiler")
endif()
target_compile_features(kson PUBLIC cxx_std_20)
target_include_directories(kson PUBLIC ${PROJECT_SOURCE_DIR}/include)
if(NOT WIN32)
    find_package(Iconv REQUIRED)
    target_link_libraries(kson PRIVATE Iconv::Iconv)
endif()

if(kson_build_ksh2kson)
    add_executable(ksh2kson ${PROJECT_SOURCE_DIR}/tool/ksh2kson.cpp)
    if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        if("${CMAKE_BUILD_TYPE}" MATCHES "Debug")
            target_compile_options(ksh2kson PRIVATE /MTd /W4)
        else()
            target_compile_options(ksh2kson PRIVATE /MT /W4 /DNDEBUG)
        endif()
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        target_compile_options(ksh2kson PRIVATE -O2 -Wall -fconcepts)
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        target_compile_options(ksh2kson PRIVATE -O2 -Wall)
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
        target_compile_options(ksh2kson PRIVATE -O2 -Wall)
    else()
        target_compile_options(ksh2kson PRIVATE -O2 -Wall)
        message("Warning: Unsupported compiler")
    endif()
    target_compile_features(ksh2kson PUBLIC cxx_std_20)
    target_link_libraries(ksh2kson kson)
endif()
